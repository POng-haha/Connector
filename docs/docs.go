// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "SYE",
            "url": "https://aeon.co.th",
            "email": "sye@aeon.co.th"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/customer/getcustomerinfo": {
            "post": {
                "description": "retrieves customer details based on customer ID and channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get Customer Information format 004",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client's API Key",
                        "name": "API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client's Request ID",
                        "name": "RequestID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.GetCustomerInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.GetCustomerInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customer/updateaddress": {
            "post": {
                "description": "update customer address from request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Update Customer Address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client's API Key",
                        "name": "API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client's Request ID",
                        "name": "RequestID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.UpdateAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.UpdateAddressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Address": {
            "type": "object",
            "required": [
                "city",
                "postalCode",
                "street"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                }
            }
        },
        "domain.ErrorResponse": {
            "type": "object",
            "properties": {
                "ErrorCode": {
                    "type": "string"
                },
                "ErrorMessage": {
                    "type": "string"
                },
                "Request_ID": {
                    "type": "string"
                },
                "Status": {
                    "type": "integer"
                },
                "Timestamp": {
                    "type": "string"
                }
            }
        },
        "domain.GetCustomerInfoRequest": {
            "type": "object",
            "properties": {
                "aeonid": {
                    "type": "string"
                },
                "agreementno": {
                    "type": "string"
                },
                "idcardno": {
                    "type": "string"
                }
            }
        },
        "domain.GetCustomerInfoResponse": {
            "type": "object",
            "properties": {
                "aeonid": {
                    "type": "string"
                },
                "customernameeng": {
                    "type": "string"
                },
                "customernameth": {
                    "type": "string"
                },
                "dateofbirth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "memberstatus": {
                    "type": "string"
                },
                "mobileno": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                }
            }
        },
        "domain.UpdateAddressRequest": {
            "type": "object",
            "required": [
                "address",
                "customerId"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/domain.Address"
                },
                "customerId": {
                    "type": "string"
                }
            }
        },
        "domain.UpdateAddressResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Template Go API",
	Description:      "This is a sample API documentation for our Go API application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
